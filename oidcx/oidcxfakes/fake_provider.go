// Code generated by counterfeiter. DO NOT EDIT.
package oidcxfakes

import (
	"sync"

	"code.cloudfoundry.org/perm/oidcx"
	"github.com/coreos/go-oidc"
)

type FakeProvider struct {
	VerifierStub        func(config *oidc.Config) *oidc.IDTokenVerifier
	verifierMutex       sync.RWMutex
	verifierArgsForCall []struct {
		config *oidc.Config
	}
	verifierReturns struct {
		result1 *oidc.IDTokenVerifier
	}
	verifierReturnsOnCall map[int]struct {
		result1 *oidc.IDTokenVerifier
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProvider) Verifier(config *oidc.Config) *oidc.IDTokenVerifier {
	fake.verifierMutex.Lock()
	ret, specificReturn := fake.verifierReturnsOnCall[len(fake.verifierArgsForCall)]
	fake.verifierArgsForCall = append(fake.verifierArgsForCall, struct {
		config *oidc.Config
	}{config})
	fake.recordInvocation("Verifier", []interface{}{config})
	fake.verifierMutex.Unlock()
	if fake.VerifierStub != nil {
		return fake.VerifierStub(config)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.verifierReturns.result1
}

func (fake *FakeProvider) VerifierCallCount() int {
	fake.verifierMutex.RLock()
	defer fake.verifierMutex.RUnlock()
	return len(fake.verifierArgsForCall)
}

func (fake *FakeProvider) VerifierArgsForCall(i int) *oidc.Config {
	fake.verifierMutex.RLock()
	defer fake.verifierMutex.RUnlock()
	return fake.verifierArgsForCall[i].config
}

func (fake *FakeProvider) VerifierReturns(result1 *oidc.IDTokenVerifier) {
	fake.VerifierStub = nil
	fake.verifierReturns = struct {
		result1 *oidc.IDTokenVerifier
	}{result1}
}

func (fake *FakeProvider) VerifierReturnsOnCall(i int, result1 *oidc.IDTokenVerifier) {
	fake.VerifierStub = nil
	if fake.verifierReturnsOnCall == nil {
		fake.verifierReturnsOnCall = make(map[int]struct {
			result1 *oidc.IDTokenVerifier
		})
	}
	fake.verifierReturnsOnCall[i] = struct {
		result1 *oidc.IDTokenVerifier
	}{result1}
}

func (fake *FakeProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifierMutex.RLock()
	defer fake.verifierMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ oidcx.Provider = new(FakeProvider)
