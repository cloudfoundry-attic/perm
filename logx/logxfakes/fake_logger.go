// Code generated by counterfeiter. DO NOT EDIT.
package logxfakes

import (
	"sync"

	"code.cloudfoundry.org/perm/logx"
)

type FakeLogger struct {
	WithNameStub        func(name string) logx.Logger
	withNameMutex       sync.RWMutex
	withNameArgsForCall []struct {
		name string
	}
	withNameReturns struct {
		result1 logx.Logger
	}
	withNameReturnsOnCall map[int]struct {
		result1 logx.Logger
	}
	WithDataStub        func(data ...logx.Data) logx.Logger
	withDataMutex       sync.RWMutex
	withDataArgsForCall []struct {
		data []logx.Data
	}
	withDataReturns struct {
		result1 logx.Logger
	}
	withDataReturnsOnCall map[int]struct {
		result1 logx.Logger
	}
	DebugStub        func(msg string, data ...logx.Data)
	debugMutex       sync.RWMutex
	debugArgsForCall []struct {
		msg  string
		data []logx.Data
	}
	InfoStub        func(msg string, data ...logx.Data)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		msg  string
		data []logx.Data
	}
	ErrorStub        func(msg string, err error, data ...logx.Data)
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		msg  string
		err  error
		data []logx.Data
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogger) WithName(name string) logx.Logger {
	fake.withNameMutex.Lock()
	ret, specificReturn := fake.withNameReturnsOnCall[len(fake.withNameArgsForCall)]
	fake.withNameArgsForCall = append(fake.withNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("WithName", []interface{}{name})
	fake.withNameMutex.Unlock()
	if fake.WithNameStub != nil {
		return fake.WithNameStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.withNameReturns.result1
}

func (fake *FakeLogger) WithNameCallCount() int {
	fake.withNameMutex.RLock()
	defer fake.withNameMutex.RUnlock()
	return len(fake.withNameArgsForCall)
}

func (fake *FakeLogger) WithNameArgsForCall(i int) string {
	fake.withNameMutex.RLock()
	defer fake.withNameMutex.RUnlock()
	return fake.withNameArgsForCall[i].name
}

func (fake *FakeLogger) WithNameReturns(result1 logx.Logger) {
	fake.WithNameStub = nil
	fake.withNameReturns = struct {
		result1 logx.Logger
	}{result1}
}

func (fake *FakeLogger) WithNameReturnsOnCall(i int, result1 logx.Logger) {
	fake.WithNameStub = nil
	if fake.withNameReturnsOnCall == nil {
		fake.withNameReturnsOnCall = make(map[int]struct {
			result1 logx.Logger
		})
	}
	fake.withNameReturnsOnCall[i] = struct {
		result1 logx.Logger
	}{result1}
}

func (fake *FakeLogger) WithData(data ...logx.Data) logx.Logger {
	fake.withDataMutex.Lock()
	ret, specificReturn := fake.withDataReturnsOnCall[len(fake.withDataArgsForCall)]
	fake.withDataArgsForCall = append(fake.withDataArgsForCall, struct {
		data []logx.Data
	}{data})
	fake.recordInvocation("WithData", []interface{}{data})
	fake.withDataMutex.Unlock()
	if fake.WithDataStub != nil {
		return fake.WithDataStub(data...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.withDataReturns.result1
}

func (fake *FakeLogger) WithDataCallCount() int {
	fake.withDataMutex.RLock()
	defer fake.withDataMutex.RUnlock()
	return len(fake.withDataArgsForCall)
}

func (fake *FakeLogger) WithDataArgsForCall(i int) []logx.Data {
	fake.withDataMutex.RLock()
	defer fake.withDataMutex.RUnlock()
	return fake.withDataArgsForCall[i].data
}

func (fake *FakeLogger) WithDataReturns(result1 logx.Logger) {
	fake.WithDataStub = nil
	fake.withDataReturns = struct {
		result1 logx.Logger
	}{result1}
}

func (fake *FakeLogger) WithDataReturnsOnCall(i int, result1 logx.Logger) {
	fake.WithDataStub = nil
	if fake.withDataReturnsOnCall == nil {
		fake.withDataReturnsOnCall = make(map[int]struct {
			result1 logx.Logger
		})
	}
	fake.withDataReturnsOnCall[i] = struct {
		result1 logx.Logger
	}{result1}
}

func (fake *FakeLogger) Debug(msg string, data ...logx.Data) {
	fake.debugMutex.Lock()
	fake.debugArgsForCall = append(fake.debugArgsForCall, struct {
		msg  string
		data []logx.Data
	}{msg, data})
	fake.recordInvocation("Debug", []interface{}{msg, data})
	fake.debugMutex.Unlock()
	if fake.DebugStub != nil {
		fake.DebugStub(msg, data...)
	}
}

func (fake *FakeLogger) DebugCallCount() int {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return len(fake.debugArgsForCall)
}

func (fake *FakeLogger) DebugArgsForCall(i int) (string, []logx.Data) {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return fake.debugArgsForCall[i].msg, fake.debugArgsForCall[i].data
}

func (fake *FakeLogger) Info(msg string, data ...logx.Data) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		msg  string
		data []logx.Data
	}{msg, data})
	fake.recordInvocation("Info", []interface{}{msg, data})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		fake.InfoStub(msg, data...)
	}
}

func (fake *FakeLogger) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeLogger) InfoArgsForCall(i int) (string, []logx.Data) {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].msg, fake.infoArgsForCall[i].data
}

func (fake *FakeLogger) Error(msg string, err error, data ...logx.Data) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		msg  string
		err  error
		data []logx.Data
	}{msg, err, data})
	fake.recordInvocation("Error", []interface{}{msg, err, data})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub(msg, err, data...)
	}
}

func (fake *FakeLogger) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeLogger) ErrorArgsForCall(i int) (string, error, []logx.Data) {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return fake.errorArgsForCall[i].msg, fake.errorArgsForCall[i].err, fake.errorArgsForCall[i].data
}

func (fake *FakeLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.withNameMutex.RLock()
	defer fake.withNameMutex.RUnlock()
	fake.withDataMutex.RLock()
	defer fake.withDataMutex.RUnlock()
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logx.Logger = new(FakeLogger)
