// Code generated by counterfeiter. DO NOT EDIT.
package rpcfakes

import (
	"sync"

	"code.cloudfoundry.org/perm/logging"
	"code.cloudfoundry.org/perm/rpc"
)

type FakeSecurityLogger struct {
	LogStub        func(signature logging.SecurityLoggerSignature, name logging.SecurityLoggerName)
	logMutex       sync.RWMutex
	logArgsForCall []struct {
		signature logging.SecurityLoggerSignature
		name      logging.SecurityLoggerName
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecurityLogger) Log(signature logging.SecurityLoggerSignature, name logging.SecurityLoggerName) {
	fake.logMutex.Lock()
	fake.logArgsForCall = append(fake.logArgsForCall, struct {
		signature logging.SecurityLoggerSignature
		name      logging.SecurityLoggerName
	}{signature, name})
	fake.recordInvocation("Log", []interface{}{signature, name})
	fake.logMutex.Unlock()
	if fake.LogStub != nil {
		fake.LogStub(signature, name)
	}
}

func (fake *FakeSecurityLogger) LogCallCount() int {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	return len(fake.logArgsForCall)
}

func (fake *FakeSecurityLogger) LogArgsForCall(i int) (logging.SecurityLoggerSignature, logging.SecurityLoggerName) {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	return fake.logArgsForCall[i].signature, fake.logArgsForCall[i].name
}

func (fake *FakeSecurityLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecurityLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rpc.SecurityLogger = new(FakeSecurityLogger)
