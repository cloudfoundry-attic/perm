// Code generated by counterfeiter. DO NOT EDIT.
package reposfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/perm/api/internal/repos"
	"code.cloudfoundry.org/perm/pkg/logx"
)

type FakePermissionRepo struct {
	HasPermissionStub        func(ctx context.Context, logger logx.Logger, query repos.HasPermissionQuery) (bool, error)
	hasPermissionMutex       sync.RWMutex
	hasPermissionArgsForCall []struct {
		ctx    context.Context
		logger logx.Logger
		query  repos.HasPermissionQuery
	}
	hasPermissionReturns struct {
		result1 bool
		result2 error
	}
	hasPermissionReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ListResourcePatternsStub        func(ctx context.Context, logger logx.Logger, query repos.ListResourcePatternsQuery) ([]string, error)
	listResourcePatternsMutex       sync.RWMutex
	listResourcePatternsArgsForCall []struct {
		ctx    context.Context
		logger logx.Logger
		query  repos.ListResourcePatternsQuery
	}
	listResourcePatternsReturns struct {
		result1 []string
		result2 error
	}
	listResourcePatternsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePermissionRepo) HasPermission(ctx context.Context, logger logx.Logger, query repos.HasPermissionQuery) (bool, error) {
	fake.hasPermissionMutex.Lock()
	ret, specificReturn := fake.hasPermissionReturnsOnCall[len(fake.hasPermissionArgsForCall)]
	fake.hasPermissionArgsForCall = append(fake.hasPermissionArgsForCall, struct {
		ctx    context.Context
		logger logx.Logger
		query  repos.HasPermissionQuery
	}{ctx, logger, query})
	fake.recordInvocation("HasPermission", []interface{}{ctx, logger, query})
	fake.hasPermissionMutex.Unlock()
	if fake.HasPermissionStub != nil {
		return fake.HasPermissionStub(ctx, logger, query)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.hasPermissionReturns.result1, fake.hasPermissionReturns.result2
}

func (fake *FakePermissionRepo) HasPermissionCallCount() int {
	fake.hasPermissionMutex.RLock()
	defer fake.hasPermissionMutex.RUnlock()
	return len(fake.hasPermissionArgsForCall)
}

func (fake *FakePermissionRepo) HasPermissionArgsForCall(i int) (context.Context, logx.Logger, repos.HasPermissionQuery) {
	fake.hasPermissionMutex.RLock()
	defer fake.hasPermissionMutex.RUnlock()
	return fake.hasPermissionArgsForCall[i].ctx, fake.hasPermissionArgsForCall[i].logger, fake.hasPermissionArgsForCall[i].query
}

func (fake *FakePermissionRepo) HasPermissionReturns(result1 bool, result2 error) {
	fake.HasPermissionStub = nil
	fake.hasPermissionReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePermissionRepo) HasPermissionReturnsOnCall(i int, result1 bool, result2 error) {
	fake.HasPermissionStub = nil
	if fake.hasPermissionReturnsOnCall == nil {
		fake.hasPermissionReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasPermissionReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePermissionRepo) ListResourcePatterns(ctx context.Context, logger logx.Logger, query repos.ListResourcePatternsQuery) ([]string, error) {
	fake.listResourcePatternsMutex.Lock()
	ret, specificReturn := fake.listResourcePatternsReturnsOnCall[len(fake.listResourcePatternsArgsForCall)]
	fake.listResourcePatternsArgsForCall = append(fake.listResourcePatternsArgsForCall, struct {
		ctx    context.Context
		logger logx.Logger
		query  repos.ListResourcePatternsQuery
	}{ctx, logger, query})
	fake.recordInvocation("ListResourcePatterns", []interface{}{ctx, logger, query})
	fake.listResourcePatternsMutex.Unlock()
	if fake.ListResourcePatternsStub != nil {
		return fake.ListResourcePatternsStub(ctx, logger, query)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listResourcePatternsReturns.result1, fake.listResourcePatternsReturns.result2
}

func (fake *FakePermissionRepo) ListResourcePatternsCallCount() int {
	fake.listResourcePatternsMutex.RLock()
	defer fake.listResourcePatternsMutex.RUnlock()
	return len(fake.listResourcePatternsArgsForCall)
}

func (fake *FakePermissionRepo) ListResourcePatternsArgsForCall(i int) (context.Context, logx.Logger, repos.ListResourcePatternsQuery) {
	fake.listResourcePatternsMutex.RLock()
	defer fake.listResourcePatternsMutex.RUnlock()
	return fake.listResourcePatternsArgsForCall[i].ctx, fake.listResourcePatternsArgsForCall[i].logger, fake.listResourcePatternsArgsForCall[i].query
}

func (fake *FakePermissionRepo) ListResourcePatternsReturns(result1 []string, result2 error) {
	fake.ListResourcePatternsStub = nil
	fake.listResourcePatternsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePermissionRepo) ListResourcePatternsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.ListResourcePatternsStub = nil
	if fake.listResourcePatternsReturnsOnCall == nil {
		fake.listResourcePatternsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listResourcePatternsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePermissionRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasPermissionMutex.RLock()
	defer fake.hasPermissionMutex.RUnlock()
	fake.listResourcePatternsMutex.RLock()
	defer fake.listResourcePatternsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePermissionRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repos.PermissionRepo = new(FakePermissionRepo)
